import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useSelector } from 'react-redux'; // üëà Importar o hook do Redux
import type { RootState } from '../redux/store'; // üëà Importe o tipo da sua RootState

// Defini√ß√£o de tipos (mantida do seu c√≥digo original)
type AllowedRole = 'ROLE_ATENDENTE' | 'ROLE_PACIENTE';

interface ProtectedRouteProps {
    allowedRoles?: AllowedRole[];
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ allowedRoles }) => {
    // 1. SUBSTITUI√á√ÉO: Usa useSelector para obter isAuthenticated e role do Redux
    const isAuthenticated = useSelector((state: RootState) => state.auth.isAuthenticated);
    const role = useSelector((state: RootState) => state.auth.role); // Role √© do tipo UserRole, que √© compat√≠vel com AllowedRole | null

    // 2. Verifica se est√° autenticado
    if (!isAuthenticated) {
        // Redireciona para /login se n√£o estiver autenticado
        return <Navigate to="/login" replace />;
    }

    // 3. Verifica a permiss√£o (Role-Based Access Control)
    // Se allowedRoles foi fornecido E o usu√°rio tem uma role E essa role N√ÉO est√° nas permitidas
    if (allowedRoles && role && !allowedRoles.includes(role as AllowedRole)) {
        // Redireciona para /unauthorized se o papel n√£o for permitido
        return <Navigate to="/unauthorized" replace />;
    }

    // 4. Permite o acesso
    // Renderiza o componente filho da rota (Outlet)
    return <Outlet />;
};

export default ProtectedRoute;